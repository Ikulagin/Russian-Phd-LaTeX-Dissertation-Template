
Создание параллельных программ в модели PGAS (\textit{PGAS-программ}) возможно с использованием $API$ или языковых конструкций, предоставляемых специальными языками программирования (\textit{PGAS-языка}). Библиотечный API реализует функции односторонних коммуникационных операций, которые используются при создании PGAS-программы. Библиотеки семейства $SHMEM$ являются наиболее известными, реализующие стандартизованное $API$ для создания PGAS-программ. Параллельная программа, разработанная при помощи API, предоставляемого библиотекой из семейства $SHMEM$, выполняется в модели \textit{SPMD -- single program, multiple data} (\textit{единая программа, множество данных}), т.е. одна и таже программа выполняется на множестве ЭМ распределенной ВС. Доступ к памяти удаленной ЭМ осуществляется при помощи операций \textit{shmem\_get} -- чтение и \textit{shmem\_put} -- запись.

Языки программирования семейства PGAS позволяют создавать параллельные программы не используя коммуникационные операции в явном виде. Вместе этого, PGAS-языки предоставляют языковые конструкции для работы с глобальным адресным пространством, реализованным над распределенной памятью ВС. Существующие PGAS-языки делятся на 2 поколения. Языки первого поколения создавались, чтобы объеденить преимущества модели $SPMD$ и ВС с общей памятью. Одним из таких активно развивающихся языков является $Unified\ Parallel\ C$ (UPC). В листинге~\ref{list:upc_example} показан пример реализации алгоритма умножения матрицы на вектор на языке UPC. Ключевое слово $shared$ используется при объявлении массивов $a$, $b$ и $c$ для того, чтобы сделать их распределенными. Тоесть, элементы этих массивов буду блочно храниться в распределенной памяти ВС. Обращение к элементам массива не требует от программиста использовать коммуникационные операции для доставки элементов массивов, хранимых в памяти удаленных ЭМ, эти обязанности ложатся на runtime-систему языка, которая может использовать односторонние коммуникационные операции.

\begin{ListingEnv}[ht]
	\small \VerbatimInput{listings/upc_example.pc}
    \caption{Пример умножения матрицы на вектор на языке UPC}
    \label{list:upc_example}
\end{ListingEnv}

PGAS-языки второго поколения разрабатывались как средства создания масштабируемых параллельных программ для ВС с распределенной памятью, удовлетворяющие следующим требованиям:
\begin{enumerate}
\item Распределенная память ВС представлена в виде единого глобального адресного пространства;
\item Все коммуникационные операции используются неявно runtime-системой языка;
\item Наличие единственного потока управления.
\end{enumerate}
К данному классу относятся следующие языки IBM X10, Cray Chapel и HPF. Отличительной особенностью PGAS-языков второго поколения от первого, является то, что они не реализуют модель SPMD. Выполнение PGAS-программы, разработанной на языке второго поколения, осуществляется в одном потоке управления на одной ЭМ -- \textit{главная ЭМ}. Оставшиеся ЭМ ВС принято называть \textit{подчиненными ЭМ}. Для выполнения параллельной обработки данных, в PGAS-языках второго поколения имеются конструкции порождения новых потоков управления как на текущей ЭМ, так и на удаленных ЭМ. Эти конструкции позволяют выделять участки кода для выполнения в новом потоке на текущей (в IBM X10 конструкция $async$) или на удаленной ЭМ (в IBM X10 конструкция $async$). Конструкция, в которой выделенный участок кода требуется выполнить на подчиненных ЭМ (удаленных ЭМ) называется -- \textit{конструкцией передачи управления подчиненным ЭМ}. Для идентификации ЭМ в PGAS-языках 2-го поколения введена специальная абстракция -- \textit{область} (в терминах языка IBM X10 -- $Place$).

\begin{ListingEnv}[ht]
	\small \VerbatimInput{listings/x10_example.pc}
    \caption{Фрагмент программы на языке IBM X10 умножения матрицы на вектор}
    \label{list:x10_example}
\end{ListingEnv}

Также как и в PGAS-языках первого поколения, в языках второго поколения предусмотрена возможность прозрачной работы с распределенными массивами. В листинге~\ref{list:x10_example} приведен фрагмент программы на языке IBM X10 умножения матрицы на вектор. В этом примере массив $a$ блоками хранится в распределенной памяти ВС. Массивы $b$ и $c$ созданы в памяти главной ЭМ. При помощи конструкии $at$ осуществляется передача потока управления подчиненной ЭМ в памяти которой хранится $i$-ая строка матрицы $a$. Подчиненная ЭМ выполняет произведение $i$-ой строки матрицы $a$ и вектора $b$. Результат произведения сохраняется в массиве $c$ при помощи глобальной ссылки $c_ref$.

При создании PGAS-программ программист использует только языковые конструкции и библиотечный API. Все коммуникационные операции генерируются PGAS-компилятором. компилятор языков программирования семейства PGAS является \textit{транспилером}, или интерпритатором, который код программы написаный на одном языке преобразует в аналогичный код, но на другом языке, как правило C/C++ или Java.

